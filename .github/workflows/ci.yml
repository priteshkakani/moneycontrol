name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend-build:
    name: Frontend build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

  frontend-test:
    name: Frontend tests (Vitest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- --coverage

      - name: Upload Vitest coverage (html)
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: frontend-coverage-html
          path: coverage
          if-no-files-found: warn

      - name: Upload Vitest coverage (lcov)
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: frontend-coverage-lcov
          path: coverage/lcov.info
          if-no-files-found: warn

  backend-check:
    name: Backend install & import check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Import FastAPI app smoke test
        run: |
          python - << 'PY'
          import sys
          sys.path.append('backend')
          import main
          assert hasattr(main, 'app'), 'FastAPI app not found in backend/main.py'
          print('App OK:', getattr(main.app, 'title', 'no-title'))
          PY

  backend-pytest:
    name: Backend tests (pytest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies (app + test)
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov

      - name: Run pytest with coverage
        env:
          PYTHONPATH: backend
        run: |
          pytest -q backend/tests --cov=backend --cov-report=term-missing --cov-report=xml --cov-report=html

      - name: Upload pytest coverage (xml)
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: backend-coverage-xml
          path: coverage.xml
          if-no-files-found: warn

      - name: Upload pytest coverage (html)
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: backend-coverage-html
          path: htmlcov
          if-no-files-found: warn

  deploy-backend-render:
    name: Deploy backend to Render
    runs-on: ubuntu-latest
    needs: [backend-check, backend-pytest]
    if: github.event_name == 'push'
    steps:
      - name: Trigger Render deploy hook
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          if [ -z "$RENDER_DEPLOY_HOOK_URL" ]; then
            echo "RENDER_DEPLOY_HOOK_URL secret is not set. Skipping backend deploy." && exit 0
          fi
          curl -fsS -X POST "$RENDER_DEPLOY_HOOK_URL"

  deploy-frontend-vercel:
    name: Deploy frontend to Vercel
    runs-on: ubuntu-latest
    needs: [frontend-build, frontend-test, deploy-backend-render]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Pull Vercel environment info
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build frontend with API base from backend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VITE_API_BASE: ${{ secrets.RENDER_BACKEND_URL }}
        run: |
          # Provide build-time env var for Vite
          vercel build --token "$VERCEL_TOKEN" --build-env VITE_API_BASE="$VITE_API_BASE"

      - name: Deploy prebuilt artifacts to production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel deploy --prebuilt --prod --yes --token "$VERCEL_TOKEN"
